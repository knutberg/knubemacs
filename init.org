#+PROPERTY: header-args :tangle yes :results silent
* User info and early init
** Eser info
In the words of Kosh Naranek: "Who are you?"
#+begin_src emacs-lisp
(setq user-full-name         "Knut Berg"
      user-mail-address      "knut.berg@nord.no"
      calendar-latitude      67.289
      calendar-longitude     14.560
      calendar-location-name "Bodø, Norway")
#+end_src

** early-init.el
 =~/.emacs.d/early-init.el= is loaded before =init.el= or any package or UI
initialization. It's not a *big deal*, but it improves startup a bit.

=file-name-handler-alist= is set to nil and reset after init. The
variable file-name-handler-alist holds a list of handlers, together
with regular expressions that determine when to apply each handler. In
short, we don't need that during init.

Bumping =gc-cons-threshold= and =gc-cons-percentage= for a faster
init. Both will be set to more reasonable values later in =init.org=.

We also invoke the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html][debugger]] for startup.

#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- -*- no-byte-compile: t-*-
(defvar startup-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)                   ; reset later

(setq gc-cons-threshold         most-positive-fixnum ; set to 32MB later
      gc-cons-percentage        0.6                  ; set to 0.1 later
      debug-on-error            t                    ; reset to nil later
      site-run-file             nil                  ; disable site-start.el
      package-enable-at-startup nil)                 ; we use straight.el

(menu-bar-mode   -1)
(tool-bar-mode   -1)
(scroll-bar-mode -1)

(unless (and (display-graphic-p) (eq system-type 'darwin))
  (push '(menu-bar-lines . 0) default-frame-alist))
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars ) default-frame-alist)

(setq inhibit-startup-message t
      inhibit-scratch-message t
      load-prefer-newer       t
      package-native-compile  t)
#+end_src

** custom.el
Save custom settings to =~/.emacs.d/custom.el=.
#+begin_src emacs-lisp
;;; init.el --- -*- lexical-binding: t -*-
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
#+end_src

** Init files
#+begin_src emacs-lisp
(setq user-init-file     (concat user-emacs-directory "init.el"))
(setq user-init-org-file (concat user-emacs-directory "init.org"))

(defun knube/reload-init ()
  "Reload ~/.emacs.d/init.el."
  (interactive)
  (org-babel-tangle-file user-init-org-file)
  (load-file user-init-file))

(defun knube/open-init ()
  "Open ~/.emacs.d/init.org."
  (interactive)
  (find-file user-init-org-file))
#+end_src

* [[https://github.com/radian-software/straight.el][straight.el]]
It's a decent way to install packages. One could augment this with [[https://jwiegley.github.io/use-package/][use-package]],
but I've always found that package to be finicky.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el"
                         user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Emacs and quality of life stuff
** System environment
#+begin_src emacs-lisp
(defconst *IS-MAC*    (eq system-type 'darwin))
(defconst *IS-WIN*    (eq system-type 'windows-nt))
(defconst *IS-WIN-WSL (and (eq system-type 'windows-nt) (getenv "WSLENV")))
(defconst *IS-LINUX*  (eq system-type 'gnu/linux))
#+end_src

** utf-8
One locale to rule them all.
#+begin_src emacs-lisp
(setq utf-translate-cjk-mode nil     ; disable CJK coding/encoding
      locale-coding-system   'utf-8)
(set-language-environment    'utf-8)
(set-default-coding-systems  'utf-8)
(set-terminal-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system        'utf-8)
#+end_src

** Emacs command keys
We set command to meta and fn to super. Option is unbound due to various specific inpüts.
#+begin_src emacs-lisp
(when *IS-MAC*
  (setq mac-command-modifier      'meta
        mac-option-modifier       nil
        mac-right-option-modifier nil
        mac-function-modifier     'super))
#+end_src
*** TODO: Do this for win and linux

** Garbage collection
We set =gc= variables to more reasonable values at the end of =emacs-startup=.
While we're at it we also reset =debug= and =file-name-handler-alist= from
=early-init.el=
#+begin_src emacs-lisp
;; Increase this if stuttering occurs. Decrease if freezes occurs.
(defvar knube-gc-cons-threshold (* 64 1024 1024))

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold       knube-gc-cons-threshold
                  gc-cons-percentage      0.1
                  debug-on-error          nil
                  file-name-handler-alist startup-file-name-handler-alist)
            (makunbound 'startup-file-name-handler-alist)))

;; Do gc when out of focus. Avoid gc when using minibuffer.
(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* knube-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold knube-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src

** Mouse scrolling
This makes scrolling a bit better with the Macbook touchpad.
#+begin_src emacs-lisp
(setq scroll-step                     1
      scroll-conservatively           101
      scroll-preserve-screen-position 'always
      next-screen-context-lines       5
      debugger-stack-frame-as-list    t
      mouse-wheel-follow-mouse        t
      mouse-wheel-scroll-amount       '(1 ((shift) . 1))
      mouse-wheel-progressive-speed   nil
      mouse-yank-at-point             t)
#+end_src

** Start maximized
Start emacs with a maximized frame.
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+end_src

** [[https://github.com/emacscollective/auto-compile][auto-compile]]
#+begin_src emacs-lisp
(straight-use-package 'auto-compile)

(auto-compile-on-load-mode +1)
(auto-compile-on-save-mode +1)
#+end_src)

** [[https://github.com/emacscollective/no-littering][no-littering]]
Make =~/.emacs.d/= nicely organized and clean.
#+begin_src emacs-lisp
(straight-use-package 'no-littering)

(setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
      no-littering-etc-directory
        (expand-file-name "config/" user-emacs-directory)
      no-littering-var-directory
	(expand-file-name "data/" user-emacs-directory))

(require 'no-littering)
(require 'recentf)

(add-to-list 'recentf-exclude no-littering-var-directory)
(add-to-list 'recentf-exclude no-littering-etc-directory)
#+end_src

** [[https://github.com/emacsorphanage/osx-trash][osx-trash]]
Make =delete-by-moving-to-trash= do what you expect it to do.
#+begin_src emacs-lisp
(when *IS-MAC*
  (straight-use-package 'osx-trash)
  (osx-trash-setup)
  (setq delete-by-moving-to-trash t))
#+end_src

** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
Paths and env variables are a pain in the mivonks. This simplifies things.
#+begin_src emacs-lisp
(straight-use-package 'exec-path-from-shell)

(exec-path-from-shell-initialize)
#+end_src

** [[https://github.com/justbur/emacs-which-key][which-key]]
#+begin_src emacs-lisp
(straight-use-package 'which-key)

(which-key-mode +1)
#+end_src

** [[https://github.com/noctuid/general.el][general.el]]
A very convenient way to deal with keybindings. Works well with evil.
#+begin_src emacs-lisp
(straight-use-package 'general)
#+end_src

** Unsorted
This needs to be cleaned up and properly commented.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook   'subword-mode)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'before-save-hook
 (lambda ()
   (when buffer-file-name
     (let ((dir (file-name-directory buffer-file-name)))
       (when (and (not (file-exists-p dir))
                  (y-or-n-p
                   (format "Directory %s does not exist. Create it?" dir)))
         (make-directory dir t))))))

(blink-cursor-mode       0)
(delete-selection-mode   1)
(transient-mark-mode     1) ; https://www.emacswiki.org/emacs/TransientMarkMode
(save-place-mode         1) ; https://www.emacswiki.org/emacs/SavePlace
(show-paren-mode         1) ; Indicate matching pairs of parentheses
(column-number-mode      1)
(global-font-lock-mode   t) ; is this really a good idea?
(global-auto-revert-mode t) ; refresh buffer on file change

(setq-default cursor-type            'bar
              indent-tabs-mode       nil  ; indent with space
              fill-column            80   ; always break at 80
              abbrev-mode            t
              dired-listing-switches "-alh")

(require 'uniquify)
(setq uniquify-buffer-name-style          'forward ; unique buffer names
      show-paren-delay                    0.0
      tab-width                           2
      delete-selection-mode               t
      sentence-end-double-space           nil
      vc-follow-symlinks                  t
      default-directory                   "~/"
      confirm-kill-emacs                  'y-or-n-p
      require-final-newline               t
      visible-bell                        t
      save-interprogram-paste-before-kill t
      apropos-do-all                      t
      save-abbrevs                        'silently
      large-file-warning-threshold        (* 15 1024 1024)
      global-mark-ring-max                500  ; we have buttloads of
      mark-ring-max                       500  ; memory, might as well
      kill-ring-max                       500) ; use it

(fset 'yes-or-no-p 'y-or-n-p)

(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+end_src


* All things visual
** Fonts
There's a bunch of good fonts out there, but I keep coming back to [[https://github.com/be5invis/Iosevka][Iosevka]].
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Iosevka"
                    :height 180
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :family "Iosevka"
                    :height 180
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :family "Iosevka"
                    :height 180
                    :weight 'medium)
#+end_src

** Themes
*** [[https://protesilaos.com/modus-themes/][modus-themes]]
We manually switch between light and dark theme with =M-x modus-themes-toggle=.
#+begin_src emacs-lisp
(straight-use-package 'modus-themes)

(setq modus-themes-org-blocks 'gray-background)

(modus-themes-load-themes)
;(modus-themes-load-operandi) ; light theme
(modus-themes-load-vivendi)  ; dark theme

(global-hl-line-mode +1)
#+end_src

** Modeline
*** [[https://github.com/tarsius/minions][minions]]
Conveniently stuffs all minor modes into one little icon.
#+begin_src emacs-lisp
(straight-use-package 'minions)
(setq minions-mode-line-lighter    "☰"
      minions-mode-line-delimiters '("" . ""))

(minions-mode +1)
#+end_src

*** [[https://github.com/dbordak/telephone-line][telephone-line]]
#+begin_src emacs-lisp
(straight-use-package 'telephone-line)

(setq telephone-line-lhs
      '((evil   . (telephone-line-evil-tag-segment
                   telephone-line-airline-position-segment))
        (accent . (telephone-line-buffer-name-segment))
        (nil    . (telephone-line-buffer-modified-segment)))

      telephone-line-rhs
      '((nil    . (telephone-line-minions-mode-segment))
        (accent . (telephone-line-vc-segment))
        (nil    . (telephone-line-misc-info-segment))))

(setq display-time-24hr-format            t
      display-time-day-and-date           t
      display-time-default-load-average   nil
      display-time-load-average           nil
      display-time-load-average-threshold nil)

(unless (equal "Battery status not available"
               (battery))
  (display-battery-mode +1))

(display-time-mode   +1)
(telephone-line-mode +1)
#+end_src


** [[https://github.com/joostkremers/writeroom-mode][writeroom-mode]]
For an uncluttered and minimalistic writing experience.
#+begin_src emacs-lisp
(straight-use-package 'writeroom-mode)

(add-hook 'writeroom-mode-enable-hook  #'(lambda () (text-scale-adjust 2)))
(add-hook 'writeroom-mode-disable-hook #'(lambda () (text-scale-adjust 0)))
#+end_src

** [[https://github.com/Fuco1/smartparens][smartparens]]
#+begin_src emacs-lisp
(straight-use-package 'smartparens)

(require 'smartparens-config)

(smartparens-global-mode +1)
#+end_src

** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters-mode]]
Colourmatched parantheses.
#+begin_src emacs-lisp
(straight-use-package 'rainbow-delimiters)

(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

* Completion
** TODO
There's a bunch of keybindings to fix here.

** [[https://github.com/minad/vertico][vertico]]
A minimal vertical completion setup. Augmented with [[https://www.emacswiki.org/emacs/SaveHist][savehist]] and [[https://github.com/oantolin/orderless][orderless]].
#+begin_src emacs-lisp
(straight-use-package 'vertico)
(straight-use-package 'savehist)
(straight-use-package 'orderless)

(setq completion-styles             '(orderless basic)
      completion-category-defaults  nil
      completion-category-overrides '((file (styles partial-completion)))
      vertico-cycle                 t)

;; Add prompt indicator to `completing-read-multiple'.
;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
(defun crm-indicator (args)
  (cons (format "[CRM%s] %s"
                (replace-regexp-in-string
                 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                 crm-separator)
                (car args))
        (cdr args)))
(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;; Emacs 28: Hide commands in M-x which do not work in the current mode.
;; Vertico commands are hidden in normal buffers.
(setq read-extended-command-predicate #'command-completion-default-include-p)

;; Enable recursive minibuffers
(setq enable-recursive-minibuffers t)

(vertico-mode  +1)
(savehist-mode +1)

(general-define-key
  :keymaps 'vertico-map
  "C-j"    #'vertico-next
  "C-k"    #'vertico-previous)
#+end_src

** [[https://github.com/minad/marginalia][marginalia]]
#+begin_src emacs-lisp
(straight-use-package 'marginalia)

(marginalia-mode +1)
#+end_src

** [[https://github.com/minad/consult][consult]]
TODO: Fix all the keybindings for this.
#+begin_src emacs-lisp
(straight-use-package 'consult)

(general-define-key
 [remap apropos]                       #'consult-apropos
 [remap bookmark-jump]                 #'consult-bookmark
 [remap evil-show-marks]               #'consult-mark
 [remap evil-show-jumps]               #'+vertico/jump-list
 [remap evil-show-registers]           #'consult-register
 [remap goto-line]                     #'consult-goto-line
 [remap imenu]                         #'consult-imenu
 [remap locate]                        #'consult-locate
 [remap load-theme]                    #'consult-theme
 [remap man]                           #'consult-man
 [remap recentf-open-files]            #'consult-recent-file
 [remap switch-to-buffer]              #'consult-buffer
 [remap switch-to-buffer-other-window] #'consult-buffer-other-window
 [remap switch-to-buffer-other-frame]  #'consult-buffer-other-frame
 [remap yank-pop]                      #'consult-yank-pop
 [remap persp-switch-to-buffer]        #'+vertico/switch-workspace-buffer)
#+end_src

** [[https://github.com/oantolin/embark][embark]]
#+begin_src emacs-lisp
(straight-use-package 'embark)
(straight-use-package 'embark-consult)

(general-define-key
 [remap describe-bindings] #'embark-bindings
 "C-."                     #'embark-act)

;; Use Embark to show bindings in a key prefix with `C-h`
(setq prefix-help-command #'embark-prefix-help-command)

(with-eval-after-load 'embark-consult
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
#+end_src

** [[https://github.com/minad/corfu][corfu]]
#+begin_src emacs-lisp
(straight-use-package 'corfu)
(straight-use-package 'corfu-doc)

(setq corfu-cycle              t     ; Allows cycling through candidates
      corfu-auto               t     ; Enable auto completion
      corfu-auto-prefix        2     ; Complete with less prefix keys
      corfu-auto-delay         0.0   ; No delay for completion
      corfu-echo-documentation 0.25) ; Echo docs for current completion option

(global-corfu-mode 1)

(add-hook 'corfu-mode-hook #'corfu-doc-mode)

(general-define-key
 :keymaps 'corfu-map
 "M-p" #'corfu-doc-scroll-down
 "M-n" #'corfu-doc-scroll-up
 "M-d" #'corfu-doc-toggle)
#+end_src

** [[https://github.com/minad/cape][cape]]
#+begin_src emacs-lisp
(straight-use-package 'cape)

(add-to-list 'completion-at-point-functions #'cape-file)
(add-to-list 'completion-at-point-functions #'cape-dabbrev)
(add-to-list 'completion-at-point-functions #'cape-tex)
#+end_src

** tempel
** [[https://github.com/bdarcus/citar][citar]]
Makes use of emacs' [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]] for a convenient citation system. Works in
org-mode!
#+begin_src emacs-lisp
(straight-use-package 'citar)

(setq citar-bibliography '("~/Dropbox/org/bibs/references.bib"))

(general-define-key
 "C-c b" #'citar-insert-citation)

(general-define-key
 :keymaps 'minibuffer-local-map
 "M-b" #'citar-insert-citation)

;; use consult-completing-read for enhanced interface
(advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
#+end_src

* All things evil
** [[https://github.com/emacs-evil/evil][evil]]
#+begin_src emacs-lisp
(straight-use-package 'evil)

(setq evil-want-integration         t
      evil-want-keybinding          nil
      evil-want-C-i-jump            nil
      evil-respect-visual-line-mode t
      evil-undo-system              'undo-redo
      evil-want-C-i-jump            t
      evil-want-Y-yank-to-eol       t
      evil-want-fine-undo           t)

(evil-mode +1)

(evil-select-search-module 'evil-search-module 'evil-search)
#+end_src

** [[https://github.com/emacs-evil/evil-collection][evil-collection]]
#+begin_src emacs-lisp
(straight-use-package 'evil-collection)

(evil-collection-init)
#+end_src

** [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
#+begin_src emacs-lisp
(straight-use-package 'evil-nerd-commenter)

(evilnc-default-hotkeys)
#+end_src

** [[https://github.com/emacs-evil/evil-surround][evil-surround]]
#+begin_src emacs-lisp
(straight-use-package 'evil-surround)

(global-evil-surround-mode +1)
#+end_src

** [[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]]
#+begin_src emacs-lisp
(straight-use-package 'evil-embrace)

(add-hook 'org-mode-hook 'embrace-org-mode-hook)

(evil-embrace-enable-evil-surround-integration)
#+end_src

* org-mode
org-mode is absolutely brilliant. Currently this section is a bit
/all-over-the-place/ and needs a proper "cleaning".
** org
#+begin_src emacs-lisp
(straight-use-package 'org)
(straight-use-package 'org-contrib)

(setq org-list-allow-alphabetical      t
      org-fontify-whole-heading-line   t
      org-startup-indented             t     ; indent sections
      org-indent-indentation-per-level 2
      org-adapt-indentation            nil
      org-src-tab-acts-natively        t     ; tab works as in any major mode
      org-src-preserve-indentation     t
      org-log-into-drawer              t     ; wtf is this?
      org-src-fontify-natively         t     ; highlight code
      org-log-done                     'time ; add dates on completion of TODOs
      org-support-shift-select         t     ; select holding down shift
      org-startup-truncated            nil
      org-directory                    "~/Dropbox/org"
      org-agenda-files                 '("~/Dropbox/org/agenda/")
      org-ellipsis                     " ⤵"
      org-src-window-setup             'current-window
      org-latex-pdf-process            (list "latexmk -xelatex -f %f"))

(add-hook 'org-mode-hook (lambda ()
                           (add-to-list 'org-structure-template-alist
                                        '("se" . "src emacs-lisp"))))

(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (latex      . t)))
#+end_src

** [[https://github.com/abo-abo/org-download][org-download]]
#+begin_src emacs-lisp
(straight-use-package 'org-download)

(setq-default org-download-image-dir "~/bilder/")

(add-hook 'dired-mode-hook 'org-download-enable)

(with-eval-after-load 'org
    (org-download-enable))
#+end_src

** org-modern
Make org look even better?
#+begin_src emacs-lisp
(straight-use-package 'org-modern)

(global-org-modern-mode +1)
#+end_src

* LaTeX
** auctex
#+begin_src emacs-lisp
(straight-use-package 'auctex)
(straight-use-package '(auctex-latexmk :type git :host github :repo "knutberg/auctex-latexmk"))

(add-hook 'LaTeX-mode-hook 'reftex-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)

(setq-default TeX-master nil
              TeX-engine 'xetex)

(setq TeX-source-correlate-method 'synctex
      TeX-source-correlate        t
      TeX-PDF-mode                t
      TeX-auto-save               t
      TeX-save-query              nil
      TeX-parse-self              t
      reftex-plug-into-AUCTeX     t
      TeX-view-program-list       '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -g %n %o %b"))
      TeX-view-program-selection  '((output-pdf "Skim"))
      TeX-clean-confirm           nil)

;; make sure everything works fine with latexmk
(setq auctex-latexmk-inherit-TeX-PDF-mode t)

(auctex-latexmk-setup)
#+end_src

** [[https://github.com/cdominik/cdlatex][cdlatex]]
#+begin_src emacs-lisp
(straight-use-package 'cdlatex)

(add-hook 'org-mode-hook   #'turn-on-org-cdlatex)
(add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)

(setq cdlatex-env-alist
      '(("equation*" "\\begin{equation*}\n?\n\\end{equation*}\n" nil)))
#+end_src

** [[https://github.com/iyefrat/evil-tex][evil-tex]]
#+begin_src emacs-lisp
(straight-use-package 'evil-tex)

(add-hook 'LaTeX-mode-hook #'evil-tex-mode)
#+end_src

* Other useful packages
** [[https://github.com/Malabarba/elisp-bug-hunter][bug-hunter]]
To debug various Lisp files
#+begin_src emacs-lisp
(straight-use-package 'bug-hunter)
#+end_src

** [[https://github.com/abo-abo/avy][avy]]
#+begin_src emacs-lisp
(straight-use-package 'avy)

(general-define-key
 "C-;"   #'avy-goto-char
 "C-:"   #'avy-goto-char-2
 "M-g f" #'avy-goto-line)
#+end_src

** [[https://github.com/bbatsov/crux][crux]] DISABLED
#+begin_src emacs-lisp :tangle no
(global-set-key (kbd "C-c o") #'crux-open-with)

(global-set-key [remap kill-line]       #'crux-smart-kill-line)
(global-set-key [remap kill-whole-line] #'crux-kill-whole-line)
(global-set-key (kbd "C-S-k")           #'crux-kill-line-backwards)
(global-set-key (kbd "s-k")             #'crux-kill-and-join-forward)

(global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)

(global-set-key [(control shift return)] 'crux-smart-open-line-above)
(global-set-key [(shift return)]         'crux-smart-open-line)

(global-set-key (kbd "C-c n") 'crux-cleanup-buffer-or-region)
(global-set-key (kbd "C-c f") 'crux-recentf-find-file)
(global-set-key (kbd "C-c F") 'crux-recentf-find-directory)
(global-set-key (kbd "C-c u") 'crux-view-url)
(global-set-key (kbd "C-c e") 'crux-eval-and-replace)
(global-set-key (kbd "C-c D") 'crux-delete-file-and-buffer)
(global-set-key (kbd "C-c c") 'crux-copy-file-preserve-attributes)
(global-set-key (kbd "C-c d") 'crux-duplicate-current-line-or-region)
(global-set-key (kbd "C-c r") 'crux-rename-file-and-buffer)
(global-set-key (kbd "C-c t") 'crux-visit-term-buffer)
(global-set-key (kbd "C-c k") 'crux-kill-other-buffers)


(global-set-key (kbd "C-c M-d") 'crux-duplicate-and-comment-current-line-or-region)
(global-set-key (kbd "C-c z")   'crux-indent-defun)
(global-set-key (kbd "C-c TAB") 'crux-indent-rigidly-and-copy-to-clipboard)

(global-set-key (kbd "C-x 4 t") 'crux-transpose-windows)

(global-set-key (kbd "C-x C-u") 'crux-upcase-region)
(global-set-key (kbd "C-x C-l") 'crux-downcase-region)
(global-set-key (kbd "C-x M-c") 'crux-capitalize-region)
#+end_src

* Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
