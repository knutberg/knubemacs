#+PROPERTY: header-args :tangle yes :results silent
My personal emacs configuration made for macos running on a macbook. It doesn't
have any version or os checks, so you should probably adapt this for your own
setup if you want to use it.

* Startup and early configuration
** early-init.el
This subsection tangles =~/.emacs.d/early-init.el= which is loaded before
=init.el= or any package or UI initialization. It's not a *big deal*, but it
improves startup a bit.

=file-name-handler-alist= is set to nil and reset after init. The
variable file-name-handler-alist holds a list of handlers, together
with regular expressions that determine when to apply each handler. In
short, we don't need that during init.

Bumping =gc-cons-threshold= and =gc-cons-percentage= for a faster
init. Both will be set to more reasonable values later in =init.org=.

We also invoke the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html][debugger]] for startup.

#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- -*- no-byte-compile: t-*-
(defvar startup-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)                   ; reset later

(setq gc-cons-threshold         most-positive-fixnum ; set to 32MB later
      gc-cons-percentage        0.6                  ; set to 0.1 later
      debug-on-error            t                    ; reset to nil later
      site-run-file             nil                  ; disable site-start.el
      package-enable-at-startup nil)                 ; we use straight.el

(menu-bar-mode   -1)
(tool-bar-mode   -1)
(scroll-bar-mode -1)

(unless (and (display-graphic-p) (eq system-type 'darwin))
  (push '(menu-bar-lines . 0) default-frame-alist))
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(setq inhibit-startup-message t
      inhibit-scratch-message t
      load-prefer-newer       t)

(setq-default evil-want-keybinding nil)
(setq-default evil-want-integration t)
#+end_src

** custom.el
Save custom settings to =~/.emacs.d/custom.el=.
#+begin_src emacs-lisp
;;; init.el --- -*- lexical-binding: t -*-
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
#+end_src

** user info
We load user info from =~/.emacs.d/user-info.el= which contains
#+begin_src emacs-lisp :tangle no
(setq user-full-name         "name"
      user-mail-address      "mail"
      calendar-latitude      0
      calendar-longitude     0
      calendar-location-name "location")
#+end_src

#+begin_src emacs-lisp
(setq user-info-file (concat user-emacs-directory "user-info.el"))
(when (file-exists-p user-info-file)
  (load user-info-file 'noerror))
#+end_src


* Package management
** straight.el
We use [[https://github.com/raxod502/straight.el/tree/develop][straight.el]] to install packages.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el"
                         user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
in =early-init.el=
#+begin_src emacs-lisp
(straight-use-package 'exec-path-from-shell)
(exec-path-from-shell-initialize)
#+end_src

** [[https://github.com/emacscollective/auto-compile][auto-compile]]
#+begin_src emacs-lisp
(straight-use-package' auto-compile)
(auto-compile-on-load-mode +1)
(auto-compile-on-save-mode +1)
#+end_src

** [[https://github.com/emacscollective/no-littering][no-littering]]
#+begin_src emacs-lisp
(straight-use-package 'no-littering)
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
(setq no-littering-etc-directory
      (expand-file-name "config/" user-emacs-directory))
(setq no-littering-var-directory
      (expand-file-name "data/" user-emacs-directory))
(require 'no-littering)
(require 'recentf)
(add-to-list 'recentf-exclude no-littering-var-directory)
(add-to-list 'recentf-exclude no-littering-etc-directory)
#+end_src

** [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]
#+begin_src emacs-lisp
(straight-use-package 'restart-emacs)
#+end_src

** remove built-in org DISABLED
We will later install the most recent (stable) version of org.
#+begin_src emacs-lisp :tangle no
(require 'cl-seq)
(setq load-path
      (cl-remove-if
       (lambda (x)
         (string-match-p "org$" x))
       load-path))
#+end_src

* Quality of life configuration
** Garbage collection
We set =gc= variables to more reasonable values at the end of =emacs-startup=.
While we're at it we also reset =debug= and =file-name-handler-alist= from
=early-init.el=
#+begin_src emacs-lisp
;; Increase this if stuttering occurs. Decrease if freezes occurs.
(defvar knube-gc-cons-threshold (* 64 1024 1024))

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold       knube-gc-cons-threshold
                  gc-cons-percentage      0.1
                  debug-on-error          nil
                  file-name-handler-alist startup-file-name-handler-alist)
            (makunbound 'startup-file-name-handler-alist)))

;; Do gc when out of focus. Avoid gc when using minibuffer.
(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* knube-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold knube-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src

** utf-8
One locale to rule them all.
#+begin_src emacs-lisp
(setq utf-translate-cjk-mode nil     ; disable CJK coding/encoding
      locale-coding-system   'utf-8)
(set-language-environment    'utf-8)
(set-default-coding-systems  'utf-8)
(set-terminal-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system        'utf-8)
#+end_src

** mouse scrolling
This makes scrolling a bit better with the macbook touchpad.
#+begin_src emacs-lisp
(setq scroll-step                     1
      scroll-conservatively           101
      scroll-preserve-screen-position 'always
      next-screen-context-lines       5
      debugger-stack-frame-as-list    t
      mouse-wheel-follow-mouse        t
      mouse-wheel-scroll-amount       '(1 ((shift) . 1))
      mouse-wheel-progressive-speed   nil
      mouse-yank-at-point             t)
#+end_src

** start maximized
Start emacs with a maximized frame. Bound to =SPC t m= later.
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+end_src

** various unsorted stuff
Most of this is copied from other emacs configs.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook   'subword-mode)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'before-save-hook
 (lambda ()
   (when buffer-file-name
     (let ((dir (file-name-directory buffer-file-name)))
       (when (and (not (file-exists-p dir))
                  (y-or-n-p
                   (format "Directory %s does not exist. Create it?" dir)))
         (make-directory dir t))))))

(blink-cursor-mode       0)
(delete-selection-mode   1)
(transient-mark-mode     1) ; https://www.emacswiki.org/emacs/TransientMarkMode
(save-place-mode         1) ; https://www.emacswiki.org/emacs/SavePlace
(show-paren-mode         1) ; Indicate matching pairs of parentheses
(column-number-mode      1)
(global-font-lock-mode   t) ; is this really a good idea?
(global-auto-revert-mode t) ; refresh buffer on file change

(setq-default cursor-type           'bar
              indent-tabs-mode       nil  ; indent with space
              fill-column            80   ; always break at 80
              abbrev-mode            t
              dired-listing-switches "-alh")

(require 'uniquify)
(setq uniquify-buffer-name-style          'forward ; unique buffer names
      show-paren-delay                    0.0
      tab-width                           2
      delete-selection-mode               t
      sentence-end-double-space           nil
      vc-follow-symlinks                  t
      default-directory                   "~/"
      confirm-kill-emacs                  'y-or-n-p
      require-final-newline               t
      visible-bell                        t
      save-interprogram-paste-before-kill t
      apropos-do-all                      t
      save-abbrevs                        'silently
      large-file-warning-threshold        (* 15 1024 1024)
      global-mark-ring-max                500  ; we have buttloads of
      mark-ring-max                       500  ; memory, might as well
      kill-ring-max                       500) ; use it

(fset 'yes-or-no-p 'y-or-n-p)

(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+end_src

* evil-mode
I'm still the process of learning evil-mode, and this is most definitely a work
in progress. See https://github.com/noctuid/evil-guide for more. Some of the
packages are for a certain mode (org-mode, latex-mode etc.) and those are added
in the appropriate section below.
** TODO Big list
1) Add the appropriate hooks for evil-embrace (LaTeX-mode and org-mode?)
2) Exemplify what the packages actually do
3) Take a look at doom emacs and see if I can adopt something?

** [[https://github.com/emacs-evil/evil][evil]]
#+begin_src emacs-lisp
(straight-use-package 'undo-fu) ;; move this!
(straight-use-package 'evil)
(setq evil-want-integration t ;; This is optional since it's already set to t by default.
      evil-want-keybinding  nil
      evil-want-fine-undo   t
      evil-undo-system      'undo-fu)
(evil-mode +1)
#+end_src

** [[https://github.com/emacs-evil/evil-collection][evil-collection]]
#+begin_src emacs-lisp
(straight-use-package 'evil-collection)
(evil-collection-init)
#+end_src

** [[https://github.com/emacs-evil/evil-surround][evil-surround]]
#+begin_src emacs-lisp
(straight-use-package 'evil-surround)
(global-evil-surround-mode +1)
#+end_src

** [[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]]
#+begin_src emacs-lisp
(straight-use-package 'evil-embrace)
(evil-embrace-enable-evil-surround-integration)
#+end_src

** [[https://github.com/edkolev/evil-lion][evil-lion]]
#+begin_src emacs-lisp
(straight-use-package 'evil-lion)
(evil-lion-mode +1)
#+end_src

** [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
#+begin_src emacs-lisp
(straight-use-package 'evil-nerd-commenter)
(evilnc-default-hotkeys)
#+end_src

** [[https://github.com/expez/evil-smartparens/][evil-smartparens]]
#+begin_src emacs-lisp
(straight-use-package 'smartparens)
(require 'smartparens-config)
(smartparens-global-mode +1)
(straight-use-package 'evil-smartparens)
(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
#+end_src

* keybindings
** [[https://github.com/noctuid/general.el][general.el]]
general.el works well with [[*evil-mode]] and provides a decent way of configuring
leader keys. Note that all [[*Keybindings]] are exiled at the very end of this file.
#+begin_src emacs-lisp
(straight-use-package 'general)
(general-auto-unbind-keys)
#+end_src

** macos specific stuff
We set command to meta. Option is unbound due to various special character
inpüts. macos shortcut(s) that use command are moved to option (System
Preferences > Keyboard > Shortcuts) or are simply disabled.
#+begin_src emacs-lisp
(setq mac-command-modifier      'meta
      mac-option-modifier       nil
      mac-right-option-modifier nil
      mac-function-modifier     nil)
#+end_src

** which-key
Display keybidings with [[https://github.com/justbur/emacs-which-key][which-key]].
#+begin_src emacs-lisp
(straight-use-package 'which-key)
(setq which-key-idle-delay    0.5
      which-key-separator     " "
      which-key-sort-order    'which-key-description-order
      which-key-prefix-prefix "+")
(which-key-mode +1)
#+end_src

** [[https://github.com/bbatsov/crux][crux]]
#+begin_src emacs-lisp
(straight-use-package 'crux)
#+end_src

* UI
Everything remotely "UI"-related goes here.
** fonts
Monospaced fonts makes life easier. Currently, my favorite is [[https://github.com/be5invis/Iosevka][Iosevka]] for everything.
#+begin_src emacs-lisp
(set-face-attribute 'default        nil :family "Iosevka"  :height 180 :weight 'light)
(set-face-attribute 'fixed-pitch    nil :family "Iosevka"  :height 180 :weight 'light)
(set-face-attribute 'variable-pitch nil :family "Iosevka"  :height 180 :weight 'light)
#+end_src

emacs 27 introduced the new =:extend= face attribute. In turn, this makes my
org-blocks look weird when switching themes. This fixes it?
#+begin_src emacs-lisp
(defun knube/fix-org-blocks ()
  (interactive)
  (eval-after-load 'org
    (lambda ()
      (set-face-attribute
       'org-block nil :extend t)
      (set-face-attribute 'org-block-begin-line nil :extend t
                          :underline nil :overline nil
                          :slant 'italic)
      (set-face-attribute 'org-block-end-line nil :extend t
                          :underline nil :overline nil
                          :slant 'italic))))
#+end_src

** [[https://protesilaos.com/modus-themes/][modus-themes]]
We manually switch between light and dark theme with =SPC t t=.
#+begin_src emacs-lisp
(straight-use-package 'modus-themes)

(setq modus-themes-org-blocks     'tinted-background
      modus-themes-scale-headings t)

(modus-themes-load-themes)
(modus-themes-load-operandi)

(setq knube/dark-theme-enabled-p nil)

(knube/fix-org-blocks)
#+end_src

** [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]]
#+begin_src emacs-lisp
(straight-use-package 'dashboard)
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
(setq dashboard-center-content t)
(setq dashboard-banner-logo-title "Welcome to knubemacs")
(dashboard-setup-startup-hook)
#+end_src

** modeline
*** [[https://github.com/tarsius/minions][minions]]
Conveniently stuffs all minor modes into one little icon.
#+begin_src emacs-lisp
(straight-use-package 'minions)

(setq minions-mode-line-lighter    "☰"
      minions-mode-line-delimiters '("" . ""))

(minions-mode +1)
#+end_src

*** [[https://github.com/dbordak/telephone-line][telephone-line]]
#+begin_src emacs-lisp
(straight-use-package 'telephone-line)

(setq telephone-line-lhs
      '((evil   . (telephone-line-evil-tag-segment
                   telephone-line-airline-position-segment))
        (accent . (telephone-line-buffer-name-segment))
        (nil    . (telephone-line-buffer-modified-segment)))

      telephone-line-rhs
      '((nil    . (telephone-line-minions-mode-segment))
        (accent . (telephone-line-vc-segment))
        (nil    . (telephone-line-misc-info-segment))))

(setq display-time-24hr-format            t
      display-time-day-and-date           t
      display-time-default-load-average   nil
      display-time-load-average           nil
      display-time-load-average-threshold nil)

(unless (equal "Battery status not available"
               (battery))
  (display-battery-mode +1))

(display-time-mode +1)
(telephone-line-mode +1)
#+end_src

** [[https://github.com/joostkremers/writeroom-mode][writeroom-mode]]
For an uncluttered and minimalistic writing experience.
#+begin_src emacs-lisp
(straight-use-package 'writeroom-mode)
#+end_src

** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters-mode]]
#+begin_src emacs-lisp
(straight-use-package 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

** [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]
Remember to do =M-x all-the-icons-install-fonts= if you don't have the fonts.
#+begin_src emacs-lisp
(straight-use-package 'all-the-icons)
#+end_src

* Completion
** emacs completion
*** [[https://github.com/raxod502/selectrum][selectrum]]
#+begin_src emacs-lisp
(straight-use-package 'selectrum)
(straight-use-package 'selectrum-prescient)

(selectrum-mode +1)
(selectrum-prescient-mode +1)
(prescient-persist-mode +1)
#+end_src

*** consult
[[https://github.com/minad/consult][consult]] builds on emacs' [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]]
#+begin_src emacs-lisp
(straight-use-package 'consult)
(general-define-key
 [remap apropos]                       #'consult-apropos
 [remap bookmark-jump]                 #'consult-bookmark
 [remap evil-show-marks]               #'consult-mark
 [remap evil-show-jumps]               #'+vertico/jump-list
 [remap goto-line]                     #'consult-goto-line
 [remap imenu]                         #'consult-imenu
 [remap locate]                        #'consult-locate
 [remap load-theme]                    #'consult-theme
 [remap man]                           #'consult-man
 [remap recentf-open-files]            #'consult-recent-file
 [remap switch-to-buffer]              #'consult-buffer
 [remap switch-to-buffer-other-window] #'consult-buffer-other-window
 [remap switch-to-buffer-other-frame]  #'consult-buffer-other-frame
 [remap yank-pop]                      #'consult-yank-pop
 [remap persp-switch-to-buffer]        #'+vertico/switch-workspace-buffer)
#+end_src

*** marginalia
[[https://github.com/minad/marginalia][marginalia]] adds annotations to minibuffer completions.
#+begin_src emacs-lisp
(straight-use-package 'marginalia)

(define-key minibuffer-local-map (kbd "M-A") 'marginalia-cycle)

(marginalia-mode +1)
#+end_src

*** embark
[[https://github.com/oantolin/embark][embark]] provides a contextual menu through =embark-act=.
#+begin_src emacs-lisp
(straight-use-package 'embark)


;; Optionally replace the key help with a completing-read interface
(setq prefix-help-command #'embark-prefix-help-command)

(add-to-list 'display-buffer-alist '("\\`\\*Embark Collect
 \\(Live\\|Completions\\)\\*" nil (window-parameters (mode-line-format .
 none))))

(straight-use-package 'embark-consult)
(add-hook 'embark-collect-mode-hook 'consult-preview-at-point-mode)
#+end_src

** code completion
*** [[http://company-mode.github.io/][company-mode]]
#+begin_src emacs-lisp
(straight-use-package 'company)
(straight-use-package 'company-prescient)

(setq company-idle-delay                0.5
      company-show-numbers              t
      company-tooltip-limit             10
      company-minimum-prefix-length     2
      company-tooltip-align-annotations t
      ;; invert the navigation direction if the the completion
      ;; popup-isearch-match is displayed on top (happens near the bottom of
      ;; windows)
      company-tooltip-flip-when-above   t)

(global-company-mode +1)
(company-prescient-mode +1)
#+end_src

** [[https://github.com/joaotavora/yasnippet][yasnippet]]
#+begin_src emacs-lisp
(straight-use-package 'yasnippet)

(setq yas-snippet-dirs '("~/.emacs.d/snippets"))

(yas-global-mode +1)
#+end_src

* org-mode
org-mode is absolutely brilliant. Currently this section is a bit
/all-over-the-place/ and needs a proper "cleaning".
** org
#+begin_src emacs-lisp
(straight-use-package 'org-contrib)
(straight-use-package 'org)

(setq org-list-allow-alphabetical      t
      org-fontify-whole-heading-line   t
      org-startup-indented             nil  ; indent sections
      org-indent-indentation-per-level 0
      org-adapt-indentation            nil
      org-src-tab-acts-natively        t     ; tab works as in any major mode
      org-src-preserve-indentation     t
      org-log-into-drawer              t     ; wtf is this?
      org-src-fontify-natively         t     ; highlight code
      org-log-done                     'time ; add dates on completion of TODOs
      org-support-shift-select         t     ; select holding down shift
      org-startup-truncated            nil
      org-directory                    "~/Dropbox/org"
      org-agenda-files                 '("~/Dropbox/org/agenda/")
      org-ellipsis                     " ⤵"
      org-src-window-setup             'current-window
      org-latex-pdf-process            (list "latexmk -xelatex -f %f"))

(add-hook 'org-mode-hook (lambda ()
                           (add-to-list 'org-structure-template-alist
                                        '("se" . "src emacs-lisp"))))

(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (latex      . t)))
#+end_src

** org-roam TODO
** org-noter TODO
** [[https://github.com/xenodium/company-org-block][company-org-block]]
Triggers with "<" and lets us quickly find the correct
org-block. ='auto= immediately triggers =org-edit-special=.
#+begin_src emacs-lisp
(straight-use-package 'company-org-block)

(setq company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline

(add-hook 'org-mode-hook (lambda ()
                           (add-to-list (make-local-variable 'company-backends)
                                        'company-org-block)))
#+end_src

** [[https://github.com/Somelauw/evil-org-mode][evil-org]]
#+begin_src emacs-lisp
(straight-use-package 'evil-org)
(add-hook 'org-mode-hook
  (lambda ()
     (evil-org-mode)
     (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
     (require 'evil-org-agenda)
     (evil-org-agenda-set-keys)))
#+end_src

* Citations
** bibtex-actions
[[https://github.com/bdarcus/bibtex-actions][bibtex-actions]] uses emacs' [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][completing-read]] for a convenient citation system.
Works in org-mode!
#+begin_src emacs-lisp
(setq knube/bibs '("~/Dropbox/org/bibs/references.bib"))

(straight-use-package 'citeproc)
(straight-use-package '(bibtex-actions :type git :host github :repo "bdarcus/bibtex-actions"))

(require 'oc)
(require 'oc-basic)
(require 'oc-csl)
(require 'oc-biblatex)
(require 'oc-natbib)
(require 'oc-bibtex-actions)

(setq bibtex-completion-bibliography             knube/bibs
      bibtex-completion-additional-search-fields '(doi url)
      bibtex-actions-at-point-function           'embark-act
      org-cite-global-bibliography               knube/bibs
      org-cite-insert-processor                  'oc-bibtex-actions
      org-cite-follow-processor                  'oc-bibtex-actions
      org-cite-activate-processor                'basic)

(add-to-list 'embark-target-finders 'bibtex-actions-citation-key-at-point)
(add-to-list 'embark-keymap-alist   '(bibtex . bibtex-actions-map))
(add-to-list 'embark-keymap-alist   '(citation-key . bibtex-actions-buffer-map))

;; Use consult-completing-read for enhanced interface.
(advice-add #'completing-read-multiple
            :override #'consult-completing-read-multiple)
#+end_src

* LaTeX
** auctex
#+begin_src emacs-lisp
(straight-use-package 'auctex)

(add-hook 'LaTeX-mode-hook 'reftex-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)

(setq-default TeX-master nil
              TeX-engine 'xetex)

(setq TeX-source-correlate-method 'synctex
      TeX-source-correlate        t
      TeX-PDF-mode                t
      TeX-auto-save               t
      TeX-save-query              nil
      TeX-parse-self              t
      reftex-plug-into-AUCTeX     t
      TeX-view-program-list       '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -g %n %o %b"))
      TeX-view-program-selection  '((output-pdf "Skim"))
      TeX-clean-confirm           nil)

;; make sure everything works fine with latexmk
(straight-use-package 'auctex-latexmk)

(setq auctex-latexmk-inherit-TeX-PDF-mode t)

(auctex-latexmk-setup)
#+end_src

** [[https://github.com/cdominik/cdlatex][cdlatex]]
#+begin_src emacs-lisp
(straight-use-package 'cdlatex)

(add-hook 'org-mode-hook   'turn-on-org-cdlatex)
(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)

(setq cdlatex-env-alist
      '(("equation*" "\\begin{equation*}\n?\n\\end{equation*}\n" nil)))
#+end_src

** [[https://github.com/iyefrat/evil-tex][evil-tex]]
#+begin_src emacs-lisp
(straight-use-package 'evil-tex)
(add-hook 'LaTeX-mode-hook #'evil-tex-mode)
#+end_src

** company-auctex DISABLED
company completion for auctex. Do I need this?
#+begin_src emacs-lisp :tangle no
(straight-use-package 'company-auctex)
(company-auctex-init)
#+end_src

** [[https://github.com/vspinu/company-math][company-math]] DISABLED
#+begin_src emacs-lisp :tangle no
(straight-use-package 'company-math)
(add-to-list 'company-backends 'company-math-symbols-unicode)
;; (add-hook 'LaTeX-mode-hook
;;           (lambda ()
;;             (setq-local company-backends
;;                         (append '((company-math-symbols-latex company-latex-commands))
;;                                 company-backends))))
#+end_src

* Keybindings and hydras
To keep track of all my keybindings I collect and sort them at the end of my config.
** Unbinds
#+begin_src emacs-lisp
(general-unbind
  "s-p"      ; no one needs print
  "C-x f"    ; set-fill-column is always 80
  "C-x C-n") ; set-goal-column is just annoying
#+end_src

** [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra and pretty-mode-hydra]]
Prettier and slightly easier [[https://github.com/abo-abo/hydra][hydra]] configurations. I'm not sure about [[https://github.com/Ladicle/hydra-posframe][hydra-posframe]], but I'll give it a go for now.
#+begin_src emacs-lisp
(straight-use-package 'major-mode-hydra) ;; this includes hydra and pretty-hydra
#+end_src

** Leader key / main hydra
#+begin_src emacs-lisp
(general-create-definer knube/spc-leader
  :states '(normal insert visual emacs)
  :prefix "SPC"
  :non-normal-prefix "M-SPC")

;; (general-create-definer knube/local-spc-leader
;;   :states '(normal insert visual emacs)
;;   :prefix "SPC m"
;;   :non-normal-prefix "M-SPC m")

;; (knube/local-spc-leader
;;   "" '(:which-key "local" :ignore))

(knube/spc-leader
 "" '(knube/spc-hydra/body :which-key "knubemacs main hydra"))


#+end_src

** SPC
#+begin_src emacs-lisp
(pretty-hydra-define knube/spc-hydra
  (:foreign-keys warn :quit-key "q")
  ("emacs"
   (("q"   nil                      "    quit this hydra")
    ("Q"   save-buffers-kill-emacs  "    exit emacs"    :exit t)
    ("R"   restart-emacs            "    restart emacs" :exit t)
    ("<spc>" execute-extended-command "M-x"))
   ""
   (("<tab>" other-window                    "other window")
    ("a"   embark-act                        "     embark act")     ; add spaces for prettier alignment
    ("z"   selectrum-repeat                  "    repeat command")
    ("d"   (switch-to-buffer "*dashboard*")  "    dashboard"))
   "hydras"
   (("m" nil                        "major mode..." :exit t)
    ("b" nil                        "buffer..."     :exit t)
    ("f" nil                        "file..."       :exit t)
    ("e" nil                        "edit..."       :exit t))
))



    ;; ("Q"   save-buffers-kill-emacs  "save and exit")
    ;; ("R"   restart-emacs            "restart emacs")
(defun knube/reload-config ()
  (interactive)
  (load-file user-init-file))

(defun knube/open-config ()
  (interactive)
  (find-file (concat user-emacs-directory "init.org")))
#+end_src
*** TODO SPC hydra other
save and exit, restart, x, reload init.el, ... ???

** COMMENT SPC f
#+begin_src emacs-lisp
(pretty-hydra-define+ knube/spc-hydra ()
  ("files"
   (("f f" find-file              "find file"  )
    ("f r" crux-recentf-find-file "find recent file")
    ("f s" save-buffer            "save buffer"          :exit t)
    ("f w" write-file             "write buffer to file" :exit t)
    ("f o" knube/spc-f-o-hydra    "other..."             :exit t))))

    ;; ("f r" crux-rename-file-and-buffer "rename file and buffer")
  ;; "f R" 'crux-recentf-find-directory
  ;; "f p" 'knube/open-config
  ;; "f l" 'knube/reload-config
  ;; "f o" 'crux-open-with

#+end_src

** COMMENT SPC e (edit)
#+begin_src emacs-lisp
(pretty-hydra-define+ knube/spc-hydra ()
  ("edit"
   (("e c" evilnc-comment-or-uncomment-lines      "(un)comment lines")
    ("e p" evilnc-comment-or-uncomment-paragraphs "(un)comment paragraph")
    ("e l" evilnc-comment-or-uncomment-region     "(un)comment region")
    ("e z" zap-up-to-char                         "zap up to char" :exit t)
    ("e o" nil                                    "other..."       :exit t))))
#+end_src

** COMMENT SPC b (buffer)
#+begin_src emacs-lisp
(pretty-hydra-define+ knube/spc-hydra ()
  ("buffer"
   (("b b" consult-buffer                "buffers" :exit t)
    ("b k" kill-buffer                   "kill buffer")
    ("b K" crux-kill-other-buffers       "kill other buffers")
    ("b n" crux-cleanup-buffer-or-region "cleanup buffer")
    ("b o" knube/spc-b-o-hydra/body      "other..." :exit t))))

  ;; "b b" 'consult-buffer
  ;; "b B" 'ibuffer
  ;; "b D" 'crux-delete-file-and-buffer
  ;; "b R" 'crux-rename-file-and-buffer
  ;; "b k" 'crux-kill-other-buffers
  ;; "b n" 'crux-cleanup-buffer-or-region)
#+end_src

** COMMENT SPC s (search)
#+begin_src emacs-lisp
(pretty-hydra-define+ knube/spc-hydra ()
  ("search"
   (("s f" isearch-forward          "search forward"     :exit t)
    ("s b" isearch-backward         "search backward"    :exit t)
    ("s r" query-replace            "search and replace" :exit t)
    ("s c" consult-ripgrep          "consult ripgrep"    :exit t)
    ("s o" knube/spc-s-o-hydra/body "other..."           :exit t))))


  ;; "s s" 'isearch-forward-regexp
  ;; "s r" 'isearch-backward-regexp
#+end_src

** COMMENT SPC w (windows)
** COMMENT SPC t (toggles)
#+begin_src emacs-lisp
(pretty-hydra-define+ knube/spc-hydra ()
  ("toggles"
   (("t t" knube/toggle-themes       "dark/light theme" :toggle knube/dark-theme-enabled-p)
    ("t r" rainbow-delimiters-mode   "rainbow delims"   :toggle t)
    ("t l" display-line-numbers-mode "line numbering"   :toggle t)
    ("t w" writeroom-mode            "writeroom"        :toggle t)
    ("t o" nil                       "other..."         :exit t))))
  ;;    t f" 'toggle-frame-fullscreen
  ;; "t m" 'toggle-frame-maximized
  ;; "t w" 'writeroom-mode)

(defun knube/toggle-themes ()
  (interactive)
  (modus-themes-toggle)
  (setq knube/dark-theme-enabled-p (not knube/dark-theme-enabled-p))
  (knube/fix-org-blocks))

(setq display-line-numbers-type 'relative)
#+end_src

** crux bindings
#+begin_src emacs-lisp
(general-define-key
 [remap kill-line] 'crux-smart-kill-line ; C-k
 "C-S-RET"         'crux-smart-open-line-above
 "S-RET"           'crux-smart-open-line
 "M-/"             'hippie-expand)
#+end_src

** embark
#+begin_src emacs-lisp
(general-define-key
 "C-."   'embark-act
 "C-;"   'embark-dwim     ; good alternative: M-.
 "C-h B" 'embark-bindings) ; embark's `describe-bindings'
#+end_src

** org-mode
#+begin_src emacs-lisp :tangle no
(knube/local-spc-leader
  :keymaps 'org-mode-map
  :states '(normal insert)
  "'" 'org-edit-special
  "b" 'org-cite-insert ;; todo: expand this into a menu
  "l" 'org-insert-link
  "e" 'org-export-dispatch
  "{" 'org-cdlatex-environment-indent)
#+end_src
*** org-src-mode
This doesn't seem to work properly?
#+begin_src emacs-lisp :tangle no
(knube/local-spc-leader
  :keymaps 'org-src-mode-map
  :states '(normal insert)
  "'" 'org-edit-src-exit
  "{" 'org-cdlatex-environment-indent)
#+end_src

* Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
